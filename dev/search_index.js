var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#TJLF","page":"API Reference","title":"TJLF","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"gauss_hermite\nget_ky_spectrum\nget_ky_spectrum_size\nget_sat_params\nreadInput\nsum_ky_spectrum\ntjlf_TM\nxgrid_functions_geo","category":"page"},{"location":"api/#TJLF.gauss_hermite","page":"API Reference","title":"TJLF.gauss_hermite","text":"gauss_hermite(inputs::InputTJLF{T}) where T<:Real\n\nparameters:     inputs::InputTJLF{T}                - InputTJLF struct constructed in tjlfreadinput.jl\n\noutputs:     OutputHermite(x,wx,h)               - OutputHermite struct\n\ndescription:     computes abscisca's and weights for Gauss- Hermite integration adapted from Numerical Recipes in Fortran Pg.147     reversed order of roots so that x(m) is largest and x(1) is smallest only the positive roots are found and stored     #–––––––––––––––––––––––––––––––     initializes the hermite basis functions and ten point Gauss-Hermite integration with absissas x and weights w.\n\n\n\n\n\n","category":"function"},{"location":"api/#TJLF.get_ky_spectrum","page":"API Reference","title":"TJLF.get_ky_spectrum","text":"get_ky_spectrum(inputs::InputTJLF{T}, grad_r0::T)::Vector{T} where T<:Real\n\nparameters:     inputs::InputTJLF{T}                - InputTJLF struct constructed in tjlfreadinput.jl     gradr0::T                          - value from SaturationParameters struct from tjlfgeometry.jl\n\noutputs:     ky_spectrum::Vector{T}              - array of floats that form the ky grid\n\ndescription:     the input file provides the type of kygrid to create (values 1 to 5) and this function creates it accordingly\n\n\n\n\n\n","category":"function"},{"location":"api/#TJLF.get_ky_spectrum_size","page":"API Reference","title":"TJLF.get_ky_spectrum_size","text":"get_ky_spectrum_size(nky::Int,kygrid_model::Int)::Int\n\nparameters:     nky::Int                            - nky from input file     kygridmodel::Int                   - kygridmodel from input file\n\noutputs:     size of the ky_spectrum array\n\ndescription:     called before creation of InputTJLF struct to get the size of ky_spectrum\n\n\n\n\n\n","category":"function"},{"location":"api/#TJLF.get_sat_params","page":"API Reference","title":"TJLF.get_sat_params","text":"get_sat_params(inputs::InputTJLF{T}; ms::Int=128) where T<:Real\n\nparameters:     inputs::InputTJLF{T}                - InputTJLF struct constructed in tjlfreadinput.jl\n\noutputs:     SaturationParameters{Float64}()     - SaturationParameters struct calculated\n\ndescription:     compute the geometric coefficients on the x-grid\n\nlocation:     tjlf_geometry.jl\n\n\n\n\n\n","category":"function"},{"location":"api/#TJLF.readInput","page":"API Reference","title":"TJLF.readInput","text":"readInput(baseDirectory::String)\n\nparameter:     baseDirectory::String - string of the directory (include a '\\' at the end) of input.tglf (NOT input.tglf.gen)\n\nreturn:     inputTJLF::InputTJLF - return InputTJLF struct based off the input.tglf file\n\ndescription:     parse through a input.tglf file found in baseDirectory parameter, creates a inputTJLF struct and populates the fields     based off the values in the file. has some check to make sure the file is written properly\n\n\n\n\n\n","category":"function"},{"location":"api/#TJLF.sum_ky_spectrum","page":"API Reference","title":"TJLF.sum_ky_spectrum","text":"sum_ky_spectrum(inputs::InputTJLF{T},satParams::SaturationParameters{T},gamma_matrix::Matrix{T},QL::Array{T,5})where T <: Real\n\nparameters:     inputs              - InputTJLF struct constructed using the input.TGLF file     gammamatrix        - matrix of gamma (mode, ky)     QLweights          - split into separate types of QL weights (field, species, mode, ky, type)                           type: (particle, energy, torodial stress, parallel stress, exchange)     (optional)          - a lot of optional parameters that I don't use -DSUN\n\noutputs:     QLfluxout         - flux integral of the QL weights (field, species, type)\n\ntakes in the input.tglf file, ky values, gammas, quasilinear weights, calls\nintensity_sat() which returns the QL intensity values, then calls\nflux_integrals() which numerically integrates the fluxes\n\n\n\n\n\n","category":"function"},{"location":"api/#TJLF.tjlf_TM","page":"API Reference","title":"TJLF.tjlf_TM","text":"tjlf_TM(inputs::InputTJLF{T},satParams::SaturationParameters{T},outputHermite::OutputHermite{T}) where T<:Real\n\nparameters:     inputs::InputTJLF{T}                - InputTJLF struct constructed in tjlfreadinput.jl     satParams::SaturationParameters{T}  - SaturationParameters struct constructed in tjlfgeometry.jl     outputHermite::OutputHermite{T}     - OutputHermite struct constructed in tjlfhermite.jl\n\noutputs:     QLweights                          - 5d array of QL weights (field, species, mode, ky, type),                                           type: (particle, energy, torodial stress, parallel stress, exchange)     firstPasseigenvalue                - 3d array of eigenvalues (mode, ky, type)                                           type: (gamma, frequency)\n\ndescription:     Main transport model function.     Calls linear TGLF over a spectrum of ky's and computes spectral integrals of field, intensity, and fluxes.\n\n\n\n\n\n","category":"function"},{"location":"api/#TJLF.xgrid_functions_geo","page":"API Reference","title":"TJLF.xgrid_functions_geo","text":"xgrid_functions_geo(inputs::InputTJLF{T}, satParams::SaturationParameters{T}, gamma_matrix::Matrix{T};small::T=0.00000001)\n\nparameters:     inputs::InputTJLF{T}                - InputTJLF struct constructed in tjlfreadinput.jl     satParams::SaturationParameters{T}  - SaturationParameters struct constructed in tjlfgeometry.jl     gammamatrix::Vector{T}             - growth rate eigenvalues for each mode\n\noutputs:     kx0e                               - value of kx0e for tge given gamma value\n\ndescription:     calculate kx0_e (spectral shift) given the growthrate used for the second pass of TM\n\nlocation:     tjlf_geometry.jl    \n\n\n\n\n\nxgrid_functions_geo(inputs::InputTJLF{T}, satParams::SaturationParameters{T}, outHermite::OutputHermite{T}, ky::T, ky_index::Int; kx0_e::T=NaN, ms::Int=128)\n\nparameters:     inputs::InputTJLF{T}                - InputTJLF struct constructed in tjlfreadinput.jl     satParams::SaturationParameters{T}  - SaturationParameters struct constructed in tjlfgeometry.jl     outputHermite::OutputHermite{T}     - OutputHermite struct constructed in tjlfhermite.jl     ky::T                               - ky value     kyindex::Int                       - index used for multithreading     kx0e::T=NaN                        - spectral shift provided for second pass \n\noutputs:     OutputGeometry{Float64}()           - OutputGeometry struct for different WIDTHS value\n\ndescription:     create the OutputGeometry struct for the specific WIDTHS value used to calculate Ave structs (tjlf_matrix.jl) used in eigenmatrix population\n\nlocation:     tjlf_geometry.jl\n\n\n\n\n\n","category":"function"},{"location":"license/","page":"License","title":"License","text":"                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/","category":"page"},{"location":"license/","page":"License","title":"License","text":"TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION","category":"page"},{"location":"license/","page":"License","title":"License","text":"Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\nGrant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\nGrant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\nRedistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or     Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices     stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works     that You distribute, all copyright, patent, trademark, and     attribution notices from the Source form of the Work,     excluding those notices that do not pertain to any part of     the Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its     distribution, then any Derivative Works that You distribute must     include a readable copy of the attribution notices contained     within such NOTICE file, excluding those notices that do not     pertain to any part of the Derivative Works, in at least one     of the following places: within a NOTICE text file distributed     as part of the Derivative Works; within the Source form or     documentation, if provided along with the Derivative Works; or,     within a display generated by the Derivative Works, if and     wherever such third-party notices normally appear. The contents     of the NOTICE file are for informational purposes only and     do not modify the License. You may add Your own attribution     notices within Derivative Works that You distribute, alongside     or as an addendum to the NOTICE text from the Work, provided     that such additional attribution notices cannot be construed     as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\nSubmission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\nTrademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\nDisclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\nLimitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\nAccepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.","category":"page"},{"location":"license/","page":"License","title":"License","text":"END OF TERMS AND CONDITIONS","category":"page"},{"location":"license/","page":"License","title":"License","text":"APPENDIX: How to apply the Apache License to your work.","category":"page"},{"location":"license/","page":"License","title":"License","text":"  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.","category":"page"},{"location":"license/","page":"License","title":"License","text":"Copyright 2024 General Atomics","category":"page"},{"location":"license/","page":"License","title":"License","text":"Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at","category":"page"},{"location":"license/","page":"License","title":"License","text":"   http://www.apache.org/licenses/LICENSE-2.0","category":"page"},{"location":"license/","page":"License","title":"License","text":"Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.","category":"page"},{"location":"#TJLF","page":"TJLF","title":"TJLF","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"Tglf in Julia Learned from Fortran (TJLF)","category":"page"},{"location":"#How-to-Run","page":"TJLF","title":"How to Run","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"First you must create a InputTJLF struct or Vector of InputTJLF structs. The best way to do this is to call readInput(directory) where directory points at an input.tglf (not .gen) file. Then, you can call either run(InputTJLF) or runtjlf(InputTJLF)/runtjlf(Vector{InputTJLF}).","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"run() will return you QLweights, eigenvalue, QLfluxout, fluxspectrum","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"run_tjlf() will return you the summed fluxes aka the array of actual values you care about with like flux matching<br> (see Indices of Arrays for how these arrays are structured)","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"Internal to these run() calls, there is a beginning, middle, end like I referred to in my presentation:<br> Beginning:  <pre>outputHermite = gausshermite(inputTJLF) satParams = getsatparams(inputTJLF) inputTJLF.KYSPECTRUM .= getkyspectrum(inputTJLF, satParams.gradr0)</pre><br> Middle: <pre>QLweights, eigenvalue = tjlfTM(inputTJLF, satParams, outputHermite)</pre><br> End: <pre>QLfluxout, fluxspectrum = sumkyspectrum(inputTJLF, satParams, eigenvalue[:,:,1], QL_weights)</pre>","category":"page"},{"location":"#InputTJLF","page":"TJLF","title":"InputTJLF","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"The InputTJLF struct can be populated with an InputTGLF struct, the translation is done in the tjlf_modules.jl file, but there are parameters missing between the two (see Deleted Parameters). The structure can also be populated with a input.tglf file (not .gen) if you pass the file directory to the readInput() function. ","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"Currently, InputTJLF structs do NOT have any default values (maybe like one or two exceptions) and should throw an error if it is not properly populated, this is to ensure the user is fully aware of the parameters they are using.","category":"page"},{"location":"#New-Parameters","page":"TJLF","title":"New Parameters","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"InputTJLF mostly follows the input.tglf file variables, but there are a couple new things","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"FINDWIDTH::Bool - this is in the input.tglf file, but is used different than in the Fortran, I have repurposed this variable to be a flag to tell the code whether or not we are providing an external width spectrum to avoid extra calls to tjlfmax.jl that solves for width (see Eigenvalue Solver)","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"WIDTHSPECTRUM::Vector - external width spectrum used if FINDWIDTH is False. If FINDWIDTH is True, this Vector will be populated with widths for each ky grid point. The idea is that you can run with FINDWIDTH set as True, it will automatically save the width spectrum, you can then change the gradients of that particular struct, and then change the FIND_WIDTH flag to False. Or, you can easily save this value to other InputTJLF struct, not sure why you would necessarily, but the information is here.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"FINDEIGEN::Bool - this flag tells the code which solver to use when solving for the eigenvalues, if unsure, FINDEIGEN as True is more robust (see Eigenvalue Solver). Should ONLY be False if FINDEIGEN is also False because it would be suspicious if you are confident on the eigenvalues enough to use and not confident on the width values (it would also probably break tjlfmax.jl), there should be an assertion to check this.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"EIGENSPECTRUM::Vector - external eigen spectrum used on the first pass if FINDEIGEN is False. This value is set to the sigma parameter of the eigs() solver and acts as an initial guess for the iterative solver. Currently, this is a vector that automatically stores the most unstable eigenvalues from the first pass, but it might be smart to save the eigenvalues for each mode and rework how eigs works in LS.jl","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"SMALL::Float - value used to rewrite the eigenvalue problem as a system of linear equations like the Fortran does (default 1e-13)","category":"page"},{"location":"#Deleted-Parameters","page":"TJLF","title":"Deleted Parameters","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"I deleted the parameters in the InputTJLF struct that are old and not used. I left comments and deleted them in commit b9a9c99 and commit 18f810f.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"Deleted parameters: USETRANSPORTMODEL,GEOMETRYFLAG,BMODELSA,FTMODELSA,VPARSHEARMODEL,WRITEWAVEFUNCTIONFLAG,VTSSHEAR,VNSSHEAR,VEXB,RMINSA,RMAJSA,QSA,SHATSA,ALPHASA,XWELLSA,THETA0SA,NNMAXERROR","category":"page"},{"location":"#Eigenvalue-Solver","page":"TJLF","title":"Eigenvalue Solver","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"Currently, Arpack.jl's eigs(), can be used in tjlfLINEARSOLUTION.jl and tjlfeigensolver.jl as a fast iterative solver. In tjlfLS.jl, eigs() is used to solve for the eigenvector instead of rewriting the generalized eigenvalue problem as a system of linear equations like TGLF, which is potentially a little troublesome. It is also used in tjlfeigensolver.jl if you provide a EIGENSPECTRUM and set FIND_EIGEN to False. eigs() does a shift and inverse iteration to solve the generalized eigenvalue problem, specifying sigma gives the shift, by setting which=:LM you tell eigs() to compute eigenvalues around sigma. I have tried which=:LR (LM is largest magnitude and LR is largest real part), but sometimes the solver will find \"fake\" eigenvalues with very large real and imaginary parts. I have found using :LM and setting sigma as the most unstable mode has worked, but more testing would be good.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"Table of the three different combinations of the solvers used in TJLF","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"+--------------+-----------------------------------------------+\n|              |                      FirstPass()              |\n+--------------+---------+-----------------+-------------------+\n|              |         | ggev!()         | eigs()            |\n|              +---------+-----------------+-------------------+\n|              | ggev!() |      1.141s     | 522.710 ms        |\n|              | eigs()  |     robust,     | robust?           |\n|              |         | most \"correct\", | thread scales??   |\n| SecondPass() |         |  thread scales? | best for 1 thread |\n| (eigenvalue, +---------+-----------------+-------------------+\n| eigenvector) | ggev!() |      1.091s     |                   |\n|              | gsev!() |       TGLF      |                   |\n|              |         |     robust,     |                   |\n|              |         |  thread scales! |                   |\n+--------------+---------+-----------------+-------------------+","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"To run top left, set the InputTJLF SMALL parameter = 0.0, set FINDEIGEN = False<br> To run mid left, use the default InputTJLF SMALL parameter = 1e-13<br> To run top right, set the InputTJLF SMALL parameter = 0.0, set FINDEIGEN = True<br>","category":"page"},{"location":"#Arpack.jl","page":"TJLF","title":"Arpack.jl","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"NOTE, If you are getting:<br> <pre> Error: XYAUPD_Exception: Maximum number of iterations taken. All possible eigenvalues of OP has been found.<br> │ IPARAM(5) returns the number of wanted converged Ritz values.<br> │   info = 1</pre>","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"Make sure you are using Arpack v0.5.3 and NOT v0.5.4, the current version does not work. You might have to restart your Julia enviroment, activate TJLF, and build.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"Also, Arpack.jl's eigs() is NOT thread safe. I have locks in the code to keep things safe. In the future, GenericArpack.jl should provide a pure Julia version of the Arpack algorithm that is thread safe, but it is still under development and seems to be a ways off.","category":"page"},{"location":"#Indices-of-Arrays","page":"TJLF","title":"Indices of Arrays","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"There are some 3D and 5D arrays where the indices are not obvious. They are specified in the function comments where they appear, but I will repeat them here:<br> <pre>QLweights::Array{5} - [field, species, mode, ky, type]<br>     type: (particle, energy, torodial stress, parallel stress, exchange)</pre><br> <pre>fluxspectrum::Array{5} - [field, species, mode, ky, type]<br>     type: (particle, energy, torodial stress, parallel stress, exchange)</pre><br> <pre>eigenvalue::Array{3} - [mode, ky, type]<br>     type: (gamma, frequency)</pre><br> <pre>QLfluxout::Array{3} - [field, species, type]<br>     type: (particle, energy, torodial stress, parallel stress, exchange)</pre><br> <pre>\"Output of run_tjlf()\"::Array{2} - [species, type]<br>     type: (particle, energy, torodial stress, parallel stress, exchange)</pre><br> <pre>species: 1 = electron, 2+ = ions</pre><br> <pre>modes: 1 = most unstable</pre> The order of the indices try to take advantage of Julia's column major memory usage","category":"page"},{"location":"#Multithreading","page":"TJLF","title":"Multithreading","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"If you are multithreading, make sure BLAS.setnumthreads(1) is set at some point.","category":"page"},{"location":"#Bash-Folder","page":"TJLF","title":"Bash Folder","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"Wrote a Bash script for testing how number of threads affects speed. Currently it is testing on the seven radial points Tim gave me found in outputs/TIM_test/. You call the executable followed by command line arguements. If you give one number, it gives you the @btime with that number of threads. If you give two numbers, it gives you the @btime looping through those two numbers. If you give three or more numbers, it gives you the @btime for each number in the arguments. I currently don't have any implementation to test the threading speed on other test cases, but you can pretty easily copy my Julia script to meet whatever you need.","category":"page"},{"location":"#Other-Notes-from-DSUN","page":"TJLF","title":"Other Notes from DSUN","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"For SAT0, TM() does not return the value of QLweights (aka \"QLfluxspectrumout\" in TGLF) and instead returns the value of what TGLF refers to as fluxspectrumout. This is because the saturation rule calculation is done in a different place (LS.jl instead of multiscalespectrum.jl), and otherwise, I would have to pass this extra Array through multiple functions just for SAT0 which is tedious and ugly. Plus SAT0 isn't really used apparently. So, if you are trying to compare the QLweights for a SAT0 run, make sure you keep this in mind.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"The name of the SaturationParameters struct is probably not a great struct name since it doesn't really relate to the saturation rules at all and instead are more related to the Miller Geometry, not sure what a better name would be since OutputGeometry is already used.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"Currently, InputTJLF's IFLUX parameter tells the code whether it is going to calculate eigenvectors. This is bad and I should probably change it into a local variable instead of a struct parameter. Ran into an issue multithreading with onePass() since it changes IFLUX in the middle of its function. The code is currently fixed with an extra \"find_eigenvector\" variable, but this should just be the standard IMO. I will try and implement this before I leave and delete the IFLUX parameter, but if this is still in the README I have not done it yet.","category":"page"},{"location":"#Online-documentation","page":"TJLF","title":"Online documentation","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"For more details, see the online documentation.","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"(Image: Docs)","category":"page"},{"location":"#Citation","page":"TJLF","title":"Citation","text":"","category":"section"},{"location":"","page":"TJLF","title":"TJLF","text":"If this software contributes to an academic publication, please cite it as follows:","category":"page"},{"location":"","page":"TJLF","title":"TJLF","text":"T.F. Neiser, D. Sun, B. Agnew, T. Slendebroek, O. Meneghini, B.C. Lyons, A. Ghiozzi, J. McClenaghan, G. Staebler and J. Candy, TJLF: The quasi-linear model of gyrokinetic transport TGLF translated to Julia, APS Meeting Abstracts (2024)","category":"page"},{"location":"notice/#TJLF.jl-Notice","page":"Notice","title":"TJLF.jl Notice","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"The purpose of this NOTICE file is to provide legal notices and acknowledgments that must be displayed to users in any derivative works or distributions. This file does not alter the terms of the Apache 2.0 license that governs the use and distribution of the TJLF.jl package.","category":"page"},{"location":"notice/#Development-Attribution","page":"Notice","title":"Development Attribution","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"TJLF.jl was originally developed under the GA Theory division of the Magnetic Fusion Energy group at General Atomics. This work is supported by the U.S. DOE under DE-FG02-95ER54309 (GA Theory) and the DOE Office of Workforce Development for Teachers and Scientists (WDTS) under the Science Undergraduate Laboratory Internships (SULI) program and used computational resources of NERSC (DOE-AC02-05CH11231).","category":"page"},{"location":"notice/#Citation","page":"Notice","title":"Citation","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"If this software contributes to an academic publication, please cite it as follows:","category":"page"},{"location":"notice/","page":"Notice","title":"Notice","text":"T.F. Neiser, D. Sun, B. Agnew, T. Slendebroek, O. Meneghini, B.C. Lyons, A. Ghiozzi, J. McClenaghan, G. Staebler and J. Candy, TJLF: The quasi-linear model of gyrokinetic transport TGLF translated to Julia, APS Meeting Abstracts (2024)","category":"page"},{"location":"notice/#Trademark-Notice","page":"Notice","title":"Trademark Notice","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"The names \"General Atomics\", and any associated logos or images, are trademarks of General Atomics. Use of these trademarks without prior written consent from General Atomics is strictly prohibited. Users cannot imply endorsement by General Atomics or contributors to the project simply because the project is part of their work.","category":"page"},{"location":"notice/#Copyright","page":"Notice","title":"Copyright","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"Copyright (c) 2024 General Atomics","category":"page"},{"location":"notice/#Version","page":"Notice","title":"Version","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"Version: v1.0","category":"page"}]
}
